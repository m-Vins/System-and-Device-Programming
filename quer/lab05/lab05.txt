System and Device Programming
Laboratory number 05 (System and Programming part)



Learning goals
--------------

Summary of advanced I/O and concurrent programming.



Exercise 01 (A, B, and C)
UNIX IPC
-------------------------

Two processes P1 and P2 want to exchange a message (more precisely a text) in both
directions, such that what is written by P1 is read by P2 and vice-versa.
P1 and P2 want to transfer the text between them using a piece of shared memory.
To be able to read and write the same chunk of shared memory, P1 and P2 synchronize
their R/W operations using a pipe.

More specifically, when P1 starts, it:
- Randomly generates a constant value n.
- Uses this value n as the size of the text to transfer to the process P1.
  - If n is zero, it stops and it forces P2 to stop too.
  - If n is not zero
    - P1 randomly generates a text including n small letters, spaces, and
      newlines.
    - P1 wakes up P2 using the pipe (e.g., it transfers on the pipe the
      text size n).
- Waits for P2.
- When it is woken up by P2, it displays the text generated by P1 converting
  all small letters into capital letters.
  No modifications have to be made to spaces and newlines.
- Repeat the entire process until either P1 or P2 generates a message (text)
  of size zero.

P2 acts as P1, but it starts by waiting and then it generates the text to
transfer to P1.

Optional
--------

Version B: Use a FIFO instead of a PIPE.
Version C: Use a Message Queue instead of a PIPE.



Exercise 02
Concurrent file sorting and merging (extension)
-----------------------------------------------

Optimize Exercise 02 of Laboratory 04 as follows.

The main thread instead of waiting for the termination of all sorting
threads *before* merging their results, starts merging ordered
sequences as soon as possible, i.e., every time one ordering thread
has done its job.

In other words, the main thread starts to initialize an "empty" and
"ordered" sequence of integer values, then it:
1. Runs all ordering threads.
2. Merges incoming ordered sequences (as soon as one ordering thread
   terminates) with its ordered sequence (initially empty) and
   it generates a unique *new* (and longer) ordered sequence.
4. Proceeds until all ordering threads have terminated.
   At this point, the generated sequence is the desired one.
5. It stores the final sequence into the output file.

Suggestions
-----------

Adapt the merge function to merge lists of values of increasing size
starting from an empty list.

Observation
-----------

Is this program faster than the one written for laboratory 04, i.e.,
is merging while sorting beneficial? How much is it faster?
To discover that, generate some large files (million of values) and
run the program computing the elapsed times used by the process.
Use the library "time.h" and the system call "clock" to evaluate the time
(for more details, please search the WEB).



Exercise 03 (A and B)
Multiple matrix multiplications
-------------------------------

Implement a *sequential* program in C that:
- Takes a single argument n from the command line
- Generates two arrays (v1 and v2) of size n and a matrix (mat) of
  dimension (n x n), assigning to all elements random values.
  All random values must be in the range [-0.5, 0.5]
- Evaluates the following product
  res = v1^T * mat * v2
  (where v1^T is the transpose of v1).
  The computation must be performed in two steps, as the program must first
  compute
  v = v1^T * mat
  and then evaluate
  res = v * v2
- Prints the result res.

For example, let us suppose that n=5, and v1, v2 and mat are the
following ones:

v1^T = [ -0.0613 -0.1184  0.2655  0.2952 -0.3131 ] 

mat  = [ -0.3424 -0.3581  0.1557  0.2577  0.2060	
          0.4706 -0.0782 -0.4643  0.2431 -0.4682
          0.4572  0.4157  0.3491  0.1078 -0.2231	
         -0.0146  0.2922  0.4340 -0.1555 -0.4029
          0.3003  0.4595  0.1787 -0.3288 -0.4656 ]

v2^T = [ -0.3235  0.1948 -0.1829  0.4502 -0.4656 ]

Then, the result of the computation is:

res = v1^T * mat * v2 = (v1^T * mat) * v2 = -0.004680

After the sequential program correctly computes the final result,
transform it into two *concurrent* programs using Pthreads.

Organize the version A of the concurrent program as follows:

- The main thread creates the arrays, the matrix, and it runs n threads.
  Then, it waits for the termination of all n threads.
- Each thread performs the product of the array v1^T with i-th row
  of mat, which produces the i-th element of vector v.
- When all threads have terminated their task, the main thread compute
  the final result as
  res = v * v2

Organize the version B of the concurrent program as version A, but
once v has been computed, the final result (i.e., res = v * v2) is computed
by one of the created threads (not by the main threads).
Force the program to use the last thread which terminates the first
part of the task to compute the second part.



